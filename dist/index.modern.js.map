{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["import Acl from 'browser-acl'\nimport { Verb, VerbObject } from 'browser-acl'\nimport { VueConstructor, VNode, DirectiveFunction } from 'vue/types'\nimport { DirectiveBinding } from 'vue/types/options'\nimport VueRouter, { Route } from 'vue-router/types'\n\nimport {\n  AclWithRouter,\n  Behaviour,\n  Options,\n  PromiseChain,\n  SetupCallback,\n  User,\n  UserGetter,\n  VueAcl,\n  VueRouterMeta,\n} from '../types'\n\nexport {\n  AclWithRouter,\n  Behaviour,\n  Options,\n  PromiseChain,\n  SetupCallback,\n  User,\n  UserGetter,\n  VueRouterMeta,\n} from '../types'\n\ninterface LooseHTMLElement extends HTMLElement {\n  disabled: boolean\n  readOnly: boolean\n}\n\nconst VueAcl: VueAcl = {\n  install(\n    Vue: VueConstructor,\n    user: User | UserGetter,\n    aclOrSetupCallback: Acl | SetupCallback | undefined = undefined,\n    options: Partial<Options> = {},\n  ): void {\n    const userAccessor: Function =\n      typeof user === 'function' ? user : () => user\n\n    /* defaults */\n    const strict = Boolean(options.strict)\n\n    const opt: Options = Object.assign(\n      {\n        acl: { strict },\n        aliases: ['role'],\n        assumeGlobal: !strict,\n        caseMode: true,\n        debug: false,\n        directive: 'can',\n        failRoute: '/',\n        helper: true,\n        strict: false,\n      },\n      options,\n    )\n\n    const findCan = findCanWithOptions(opt)\n\n    /* setup acl */\n    let acl: AclWithRouter = new Acl(opt.acl) as AclWithRouter\n    if (typeof aclOrSetupCallback === 'function') {\n      aclOrSetupCallback(acl)\n    } else if (aclOrSetupCallback instanceof Acl) {\n      acl = aclOrSetupCallback\n    }\n\n    /* router init function */\n    acl.router = function (router: VueRouter) {\n      opt.router = router\n\n      const canNavigate = (\n        verb: string,\n        verbObject: string | null,\n        ...otherArgs: any[]\n      ) => {\n        return acl.can(userAccessor(), verb, verbObject || undefined, ...otherArgs)\n      }\n\n      /* convert 'edit Post' to ['edit', 'Post'] */\n      const aclTuple = (value: string): [string, string | null] => {\n        const [\n          verb,\n          verbObject = opt.assumeGlobal ? Acl.GlobalRule : null,\n        ] = value.split(' ')\n        return [verb, verbObject]\n      }\n\n      /**\n       * chain all can-statements and functions as promises\n       * each can-function must return a promise (in strict\n       * mode at least). To break the chain return a none\n       * true value\n       */\n      const chainCans = (\n        metas: VueRouterMeta[],\n        to: Route,\n        from: Route,\n      ): PromiseChain => {\n        let fail: string | null = null\n        const chain: PromiseChain = metas.reduce((chain, meta) => {\n          return (\n            chain\n              .then((result: any) => {\n                if (result !== true) {\n                  return result\n                }\n\n                if (typeof meta.fail === 'string') {\n                  fail = meta.fail\n                }\n\n                const can = findCan(meta)\n\n                const nextPromise =\n                  typeof can === 'function'\n                    ? can(to, from, canNavigate)\n                    : Promise.resolve(canNavigate(...aclTuple(can)))\n\n                if (opt.strict && !(nextPromise instanceof Promise)) {\n                  throw new Error(\n                    '$route.meta.can must return a promise in strict mode',\n                  )\n                }\n\n                return nextPromise\n              })\n              // convert errors to false\n              .catch((error) => {\n                if (opt.debug) {\n                  console.error(error)\n                }\n                return false\n              })\n          )\n        }, Promise.resolve(true)) as PromiseChain\n        chain.getFail = () => fail\n        return chain\n      }\n\n      router.beforeEach((to: Route, from: Route, next: any) => {\n        const metas = to.matched\n          .filter((route) => route.meta && findCan(route.meta))\n          .map((route) => route.meta)\n\n        const chain = chainCans(metas, to, from)\n\n        chain.then((result) => {\n          if (result === true) {\n            return next()\n          }\n\n          let fail: string | Function | null = chain.getFail() || opt.failRoute\n\n          if (fail === '$from') {\n            fail = from.path\n          }\n\n          next(typeof fail === 'function' ? fail(to, from) : fail)\n        })\n      })\n    }\n\n    /* init router */\n    if (opt.router) {\n      acl.router(opt.router)\n    }\n\n    /* directive update handler */\n    const directiveHandler: DirectiveFunction = function (\n      el: HTMLElement,\n      binding: DirectiveBinding,\n      vnode: VNode,\n    ): void {\n      const behaviour: Behaviour = getBehaviour(binding.modifiers)\n\n      let verb, verbArg, verbObject, params\n      verbArg = binding.arg\n\n      if (Array.isArray(binding.value) && binding.expression.startsWith('[')) {\n        ;[verb, verbObject, params] = binding.modifiers.global\n          ? arrayToGlobalExprTpl(binding)\n          : arrayToExprTpl(binding)\n      } else if (typeof binding.value === 'string') {\n        ;[verb, verbObject, params] = stringToExprTpl(binding, vnode, opt)\n      } else if (verbArg && typeof binding.value === 'object') {\n        verb = verbArg\n        verbObject = binding.value\n        params = []\n      } else if (\n        binding.value === undefined &&\n        !binding.modifiers.global &&\n        opt.assumeGlobal\n      ) {\n        // Fall back to global if no value is provided\n        verb = verbArg\n        verbObject = Acl.GlobalRule\n        params = []\n      }\n\n      if (opt.assumeGlobal && !verbObject) {\n        verbObject = Acl.GlobalRule\n        params = params || []\n        verb = verb || verbArg\n      }\n\n      if (!verb || !verbObject) {\n        throw new Error('Missing verb or verb object')\n      }\n\n      const aclMethod =\n        (binding.modifiers.some && 'some') ||\n        (binding.modifiers.every && 'every') ||\n        'can'\n\n      const ok = acl[aclMethod](userAccessor(), verb, verbObject, ...params)\n      const not = binding.modifiers.not\n\n      const el_ = el as LooseHTMLElement\n      el_.disabled = false\n      el_.readOnly = false\n\n      if ((ok && not) || (!ok && !not)) {\n        if (behaviour === 'hide') {\n          commentNode(el, vnode)\n        } else if (behaviour === 'disable') {\n          el_.disabled = true\n        } else if (behaviour === 'readonly') {\n          el_.readOnly = true\n        }\n      }\n    }\n\n    /* set up directive for 'can' and aliases */\n    const directiveNames = [opt.directive, ...opt.aliases]\n    directiveNames.forEach((name) => Vue.directive(name, directiveHandler))\n\n    /* define helpers */\n    if (opt.helper) {\n      const helper = `$${opt.directive}`\n      /* @type AclHelper */\n      Vue.prototype[helper] = function (\n        verb: Verb,\n        verbObject: VerbObject,\n        ...args: any[]\n      ) {\n        return acl.can(userAccessor(), verb, verbObject, ...args)\n      }\n      /* @type AclHelper */\n      Vue.prototype[helper].not = function (\n        verb: Verb,\n        verbObject: VerbObject,\n        ...args: any[]\n      ) {\n        return !acl.can(userAccessor(), verb, verbObject, ...args)\n      }\n      /* @type AclHelperMany */\n      Vue.prototype[helper].every = function (\n        verb: Verb,\n        verbObjects: VerbObject[],\n        ...args: any[]\n      ) {\n        return acl.every(userAccessor(), verb, verbObjects, ...args)\n      }\n      /* @type AclHelperMany */\n      Vue.prototype[helper].some = function (\n        verb: Verb,\n        verbObjects: VerbObject[],\n        ...args: any[]\n      ) {\n        return acl.some(userAccessor(), verb, verbObjects, ...args)\n      }\n    }\n  },\n}\n\nfunction getBehaviour(modifiers: any): Behaviour {\n  if (typeof modifiers.disable !== 'undefined') {\n    return 'disable'\n  }\n  if (typeof modifiers.readonly !== 'undefined') {\n    return 'readonly'\n  }\n  return 'hide'\n}\n\n/**\n * Create comment node\n *\n * @private\n * @author https://stackoverflow.com/questions/43003976/a-custom-directive-similar-to-v-if-in-vuejs#43543814\n */\nfunction commentNode(el: HTMLElement, vnode: VNode) {\n  const comment = document.createComment(' ')\n\n  Object.defineProperty(comment, 'setAttribute', {\n    value: () => undefined,\n  })\n\n  vnode.text = ' '\n  vnode.elm = comment\n  vnode.isComment = true\n  vnode.tag = undefined\n\n  vnode.data = vnode.data || {}\n  vnode.data.directives = undefined\n\n  if (vnode.componentInstance) {\n    // @ts-ignore\n    vnode.componentInstance.$el = comment\n  }\n\n  if (el.parentNode) {\n    el.parentNode.replaceChild(comment, el)\n  }\n}\n\n/**\n * Return the first property from meta that is 'can' or one of its aliases.\n */\nconst findCanWithOptions = (opt: Options) => (\n  meta: VueRouterMeta,\n): string | Function => {\n  return ([opt.directive, ...(opt.aliases || [])] as string[])\n    .map((key: string) => meta[key])\n    .filter(Boolean)\n    .shift()\n}\n\n/**\n * Maps binding.value of type array to expression tuple\n */\nconst arrayToExprTpl = ({ arg, value }: DirectiveBinding) => [\n  arg || value[0],\n  arg ? value[0] : value[1],\n  arg ? value.slice(1) : value.slice(2),\n]\n\n/**\n * Maps binding.value of type array to global expression tuple\n */\nconst arrayToGlobalExprTpl = ({ arg, value }: DirectiveBinding) => [\n  arg || value[0],\n  Acl.GlobalRule,\n  arg ? value : value.slice(1),\n]\n\n/**\n * Maps binding.value of type string to expression tuple\n */\nconst stringToExprTpl = (\n  { arg, value, modifiers }: DirectiveBinding,\n  vnode: VNode,\n  opt: Options,\n) => {\n  let [verb, verbObject] = arg ? [arg, value] : value.split(' ')\n\n  if (verbObject && modifiers.global) {\n    throw new Error(\n      'You cannot provide verb object and use global modifier at the same time',\n    )\n  }\n\n  if (\n    typeof verbObject === 'string' &&\n    opt.caseMode &&\n    verbObject[0].match(/[a-z]/) &&\n    typeof vnode.context === 'object'\n  ) {\n    verbObject = vnode.context.$data[verbObject]\n  }\n\n  return [verb, verbObject, []]\n}\n\nexport default VueAcl\n"],"names":["VueAcl","install","Vue","user","aclOrSetupCallback","options","userAccessor","strict","Boolean","opt","Object","assign","acl","aliases","assumeGlobal","caseMode","debug","directive","failRoute","helper","findCan","findCanWithOptions","Acl","router","canNavigate","verb","verbObject","otherArgs","can","undefined","beforeEach","to","from","next","chain","metas","fail","reduce","meta","then","result","nextPromise","Promise","resolve","value","GlobalRule","split","aclTuple","Error","catch","error","console","getFail","chainCans","matched","filter","route","map","path","directiveHandler","el","binding","vnode","behaviour","modifiers","disable","readonly","verbArg","params","arg","Array","isArray","expression","startsWith","global","arrayToGlobalExprTpl","arrayToExprTpl","stringToExprTpl","ok","some","every","not","el_","disabled","readOnly","comment","document","createComment","defineProperty","text","elm","isComment","tag","data","directives","componentInstance","$el","parentNode","replaceChild","commentNode","forEach","name","prototype","args","verbObjects","key","shift","slice","match","context","$data"],"mappings":"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"}